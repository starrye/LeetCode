# encoding: utf-8
"""
@author: liuwz
@time: 2021/3/29 2:37 下午
@file: 1541. 平衡括号字符串的最少插入次数.py
@desc: 
"""
"""
给你一个括号字符串 s ，它只包含字符 '(' 和 ')' 。一个括号字符串被称为平衡的当它满足：
任何左括号 '(' 必须对应两个连续的右括号 '))' 。
左括号 '(' 必须在对应的连续两个右括号 '))' 之前。
比方说 "())"， "())(())))" 和 "(())())))" 都是平衡的， ")()"， "()))" 和 "(()))" 都是不平衡的。
你可以在任意位置插入字符 '(' 和 ')' 使字符串平衡。
请你返回让 s 平衡的最少插入次数。


示例 1：

输入：s = "(()))"
输出：1
解释：第二个左括号有与之匹配的两个右括号，但是第一个左括号只有一个右括号。我们需要在字符串结尾额外增加一个 ')' 使字符串变成平衡字符串 "(())))" 。
示例 2：

输入：s = "())"
输出：0
解释：字符串已经平衡了。
示例 3：

输入：s = "))())("
输出：3
解释：添加 '(' 去匹配最开头的 '))' ，然后添加 '))' 去匹配最后一个 '(' 。
示例 4：

输入：s = "(((((("
输出：12
解释：添加 12 个 ')' 得到平衡字符串。
示例 5：

输入：s = ")))))))"
输出：5
解释：在字符串开头添加 4 个 '(' 并在结尾添加 1 个 ')' ，字符串变成平衡字符串 "(((())))))))" 。
 

提示：

1 <= s.length <= 10^5
s 只包含 '(' 和 ')' 。

"""


class Solution:
    def minInsertions(self, s: str) -> int:
        """
        depth:多余的左括号
        res:需要插入的次数
        """
        depth, res, i = 0, 0, 0
        n = len(s)
        while i < n:
            # 如果当前字符为( 记录多余的左括号+1
            if s[i] == "(":
                depth += 1
            else:
                # 如果当前的字符为） 判断下一个字符是否是 ) 如果是则跳过下个循环
                if i + 1 < n and s[i + 1] == ")":
                    i += 1
                else:
                    # 如果是单独的）出现 则需要匹配一个） 因为）不可能单独出现
                    res += 1

                # 如果有左括号 则两个右括号匹配掉一个左括号 （到此步时，一定有两个右括号）
                if depth > 0:
                    depth -= 1
                else:
                    # 如果左括号没有了 则应该插入一个左括号 对应的res += 1
                    res += 1
            i += 1
        res += depth * 2
        return res