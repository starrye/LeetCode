二分查找:
    假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置记录将表分成前、后两个子表，
    如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的记录，使查找成功，
    或直到子表不存在为止，此时查找不成功
    # 顺序存储结构！！！
"""
def binary_search(nums,target):
    i = 0
    j = len(nums) - 1
    while i <= j:
        mid = (i + j) // 2
        if nums[mid] == target:
            return mid
        elif nums[mid] > target:
            j = mid - 1
        elif nums[mid] < target:
            i = mid + 1
    return -1
"""
# 在array的前index元素中寻找value值对应的索引(若没有该值，则返回应该插入的位置)
bisect.bisect(array, value, hi=index)

# 让返回符合条件的x尽量小，牺牲一部分性能 但是保证x一定在元素中
while (left < right) {
    int x = left + (right - left) / 2;
    // ...
    if (count >= k) {
        right = x;
    } else {
        left = x + 1;
    }
}